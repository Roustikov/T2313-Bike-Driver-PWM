;#include <tiny2313a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;//#include <sleep.h>
;#define MIN 1
;#define MAX 170
;
;enum mode
;{
;    pulse,
;    full,
;    half,
;    tenth,
;    strobe,
;    off
;}mode;
;
;
;void pulse_mode()
; 0000 0013 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0014     int delay = 5;
; 0000 0015     PINB.2=1;
;PCODE: $0000000C VOL: 0
;	delay -> R16,R17
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0016     OCR0A=0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0017     while(OCR0A!=MAX && mode == pulse)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0018     {
; 0000 0019         OCR0A++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001A         delay_ms(delay);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001B     }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001C 
; 0000 001D     while(OCR0A!=MIN && mode == pulse)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001E     {
; 0000 001F         OCR0A--;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0020         if(OCR0A==MIN)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0021             delay_ms(150); //bottom
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022         delay_ms(delay);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0023     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0024 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;void full_mode()
; 0000 0027 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0028     OCR0A=255;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0029     PINB.2=1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002A }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void half_mode()
; 0000 002D {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002E     OCR0A=50;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 002F     PINB.2=1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0030 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;void tenth_mode()
; 0000 0033 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0034     OCR0A=10;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0035     PINB.2=1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0036 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void strobe_mode()
; 0000 0039 {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003A     OCR0A=255;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003B     delay_ms(100);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003C     OCR0A=0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003D     delay_ms(100);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003E }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;
;void off_mode()
; 0000 0042 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0043     OCR0A=0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0044     PINB.2=0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0045     //sleep_enable(); // разрешаем сон
; 0000 0046     //sleep(); // спать!
; 0000 0047 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;
;void mode_switch()
; 0000 004A {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004B     if(mode == pulse)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004C         mode = full;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004D     else if(mode == full)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 004E         mode = half;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004F     else if(mode == half)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0050         mode = tenth;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0051     else if(mode == tenth)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0052         mode = strobe;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0053     else if(mode == strobe)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0054         mode = pulse;
;PCODE: $0000008F VOL: 0
; 0000 0055 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;// Timer 0 output compare B interrupt service routine
;interrupt [TIM0_COMPB] void timer0_compb_isr(void)
; 0000 0059 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 005A // Place your code here
; 0000 005B 
; 0000 005C }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0060 {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0061 delay_ms(200);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0062 
; 0000 0063 if(PIND.2==0)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0064 {
; 0000 0065     while(PIND.2==0)
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0066     {
; 0000 0067         strobe_mode();
;PCODE: $000000A8 VOL: 0
; 0000 0068     }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0069 }
; 0000 006A else
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006B {
; 0000 006C     mode_switch();
;PCODE: $000000AD VOL: 0
; 0000 006D }
;PCODE: $000000AE VOL: 0
; 0000 006E 
; 0000 006F }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0073 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0074 // Place your code here
; 0000 0075 
; 0000 0076 }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 007C {
;PCODE: $000000B7 VOL: 0
; 0000 007D 
; 0000 007E 
; 0000 007F // Declare your local variables here
; 0000 0080 
; 0000 0081 // Crystal Oscillator division factor: 1
; 0000 0082 #pragma optsize-
; 0000 0083 CLKPR=0x80;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0084 CLKPR=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0085 #ifdef _OPTIMIZE_SIZE_
; 0000 0086 #pragma optsize+
; 0000 0087 #endif
; 0000 0088 
; 0000 0089 // Input/Output Ports initialization
; 0000 008A // Port A initialization
; 0000 008B // Func2=Out Func1=Out Func0=Out
; 0000 008C // State2=0 State1=0 State0=0
; 0000 008D PORTA=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 008E DDRA=0x07;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008F 
; 0000 0090 // Port B initialization
; 0000 0091 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0092 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0093 PORTB=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0094 DDRB=0xFF;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0095 
; 0000 0096 // Port D initialization
; 0000 0097 // Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
; 0000 0098 // State6=0 State5=0 State4=0 State3=0 State2=P State1=0 State0=0
; 0000 0099 PORTD=0x04;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 009A DDRD=0x7B;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009B DDRD.6 = 1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009C PIND.6 = 1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 009D 
; 0000 009E 
; 0000 009F // Timer/Counter 0 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: 8000,000 kHz
; 0000 00A2 // Mode: Phase correct PWM top=0xFF
; 0000 00A3 // OC0A output: Non-Inverted PWM
; 0000 00A4 // OC0B output: Disconnected
; 0000 00A5 TCCR0A=0x81;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A6 TCCR0B=0x01;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A7 TCNT0=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00A8 OCR0A=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A9 OCR0B=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00AA 
; 0000 00AB 
; 0000 00AC 
; 0000 00AD // Timer/Counter 1 initialization
; 0000 00AE // Clock source: System Clock
; 0000 00AF // Clock value: Timer1 Stopped
; 0000 00B0 // Mode: Normal top=0xFFFF
; 0000 00B1 // OC1A output: Discon.
; 0000 00B2 // OC1B output: Discon.
; 0000 00B3 // Noise Canceler: Off
; 0000 00B4 // Input Capture on Falling Edge
; 0000 00B5 // Timer1 Overflow Interrupt: Off
; 0000 00B6 // Input Capture Interrupt: Off
; 0000 00B7 // Compare A Match Interrupt: Off
; 0000 00B8 // Compare B Match Interrupt: Off
; 0000 00B9 TCCR1A=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00BA TCCR1B=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00BB TCNT1H=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00BC TCNT1L=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00BD ICR1H=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00BE ICR1L=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00BF OCR1AH=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00C0 OCR1AL=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00C1 OCR1BH=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C2 OCR1BL=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C3 // External Interrupt(s) initialization
; 0000 00C4 // INT0: On
; 0000 00C5 // INT0 Mode: Low level
; 0000 00C6 // INT1: Off
; 0000 00C7 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00C8 // Interrupt on any change on pins PCINT8-10: Off
; 0000 00C9 // Interrupt on any change on pins PCINT11-17: Off
; 0000 00CA MCUCR=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00CB GIMSK=0x40;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00CC GIFR=0x40;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00CD 
; 0000 00CE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CF TIMSK=0x04;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00D0 
; 0000 00D1 // Universal Serial Interface initialization
; 0000 00D2 // Mode: Disabled
; 0000 00D3 // Clock source: Register & Counter=no clk.
; 0000 00D4 // USI Counter Overflow Interrupt: Off
; 0000 00D5 USICR=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00D6 
; 0000 00D7 // USART initialization
; 0000 00D8 // USART disabled
; 0000 00D9 UCSRB=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00DA 
; 0000 00DB // Analog Comparator initialization
; 0000 00DC // Analog Comparator: Off
; 0000 00DD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00DE ACSR=0x80;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00DF DIDR=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00E0 
; 0000 00E1 // Global enable interrupts
; 0000 00E2 #asm("sei")
;PCODE: $000000FA VOL: 0
	sei
;PCODE: $000000FB VOL: 0
; 0000 00E3     while (1)
;PCODE: $000000FC VOL: 0
; 0000 00E4     {
; 0000 00E5         if(mode==pulse)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00E6         {
; 0000 00E7             pulse_mode();
;PCODE: $000000FF VOL: 0
; 0000 00E8         }
; 0000 00E9 
; 0000 00EA         else if(mode == strobe)
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00EB         {
; 0000 00EC             strobe_mode();
;PCODE: $00000105 VOL: 0
; 0000 00ED         }
; 0000 00EE 
; 0000 00EF         else if(mode == full)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00F0         {
; 0000 00F1             full_mode();
;PCODE: $0000010B VOL: 0
; 0000 00F2         }
; 0000 00F3 
; 0000 00F4         else if(mode == half)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00F5         {
; 0000 00F6             half_mode();
;PCODE: $00000111 VOL: 0
; 0000 00F7         }
; 0000 00F8 
; 0000 00F9         else if(mode == tenth)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00FA         {
; 0000 00FB             tenth_mode();
;PCODE: $00000117 VOL: 0
; 0000 00FC         }
; 0000 00FD 
; 0000 00FE         else if(mode == off)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00FF         {
; 0000 0100             off_mode();
;PCODE: $0000011D VOL: 0
; 0000 0101         }
; 0000 0102     }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0103 }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
